# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '영광테크.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import pandas as pd
import qdarkstyle
import qdarktheme
from PyQt5 import QtCore, QtWidgets

from qtpy import QtWidgets

import qtvscodestyle as qtvsc
from PyQt5.QtWidgets import QTableWidgetItem


os.environ['QT_API'] = 'pyqt5'

class Ui_mainWindow(object):
    def setupUi(self, mainWindow):
        mainWindow.setObjectName("mainWindow")
        mainWindow.resize(1280, 800)
        mainWindow.setMinimumSize(QtCore.QSize(1280, 800))
        mainWindow.setMaximumSize(QtCore.QSize(1280, 800))


        self.centralwidget = QtWidgets.QWidget(mainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalFrame = QtWidgets.QFrame(self.centralwidget)
        self.horizontalFrame.setGeometry(QtCore.QRect(0, 10, 1280, 781))
        self.horizontalFrame.setObjectName("horizontalFrame")
        self.tableWidget99 = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget99.setRowCount(1)
        self.tableWidget99.setColumnCount(1)  # 이부분 tableWidget의 none값의 타입을 모르겠고 인터넷에서도 관련 문서를 찾을 수가 없어서 이렇게 나둠. 비어있는지 비교하기 위한 값.
        self.tableWidget99.hide()


        self.Frame_1 = QtWidgets.QFrame(self.horizontalFrame)
        self.Frame_1.setGeometry(QtCore.QRect(10, 70, 511, 231))
        self.Frame_1.setObjectName("Frame_1")
        self.label_1 = QtWidgets.QLabel(self.Frame_1)
        self.label_1.setGeometry(QtCore.QRect(0, 0, 60, 16))
        self.label_1.setObjectName("label_1")
        self.tableWidget = QtWidgets.QTableWidget(self.Frame_1)
        self.tableWidget.setGeometry(QtCore.QRect(0, 20, 511, 211))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(2)
        self.tableWidget.setRowCount(10)
        self.tableWidget.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tableWidget.setAlternatingRowColors(True)
        self.tableWidget.resizeColumnToContents(True)
        self.tableWidget.horizontalHeader().setStretchLastSection(True)
        self.tableWidget.cellClicked.connect(self.company_tablewidget_changed2)

        self.company_tablewidget_set()

        self.Frame_2 = QtWidgets.QFrame(self.horizontalFrame)
        self.Frame_2.setGeometry(QtCore.QRect(10, 310, 511, 231))
        self.Frame_2.setObjectName("Frame_2")
        self.label_2 = QtWidgets.QLabel(self.Frame_2)
        self.label_2.setGeometry(QtCore.QRect(0, 0, 60, 16))
        self.label_2.setObjectName("label_2")
        self.tableWidget_2 = QtWidgets.QTableWidget(self.Frame_2)
        self.tableWidget_2.setGeometry(QtCore.QRect(0, 20, 511, 211))
        self.tableWidget_2.setObjectName("tableWidget_2")
        self.tableWidget_2.setColumnCount(2)
        self.tableWidget_2.setRowCount(100)
        self.tableWidget_2.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tableWidget_2.setAlternatingRowColors(True)
        self.tableWidget_2.resizeColumnToContents(True)
        self.tableWidget_2.horizontalHeader().setStretchLastSection(True)
        self.tableWidget_2.cellClicked.connect(self.products_tablewidget_changed2)

        self.Frame_3 = QtWidgets.QFrame(self.horizontalFrame)
        self.Frame_3.setGeometry(QtCore.QRect(10, 550, 511, 231))
        self.Frame_3.setObjectName("Frame_3")
        self.label_3 = QtWidgets.QLabel(self.Frame_3)
        self.label_3.setGeometry(QtCore.QRect(0, 0, 60, 16))
        self.label_3.setObjectName("label_3")
        self.tableWidget_3 = QtWidgets.QTableWidget(self.Frame_3)
        self.tableWidget_3.setGeometry(QtCore.QRect(0, 20, 511, 211))
        self.tableWidget_3.setObjectName("tableWidget_3")
        self.tableWidget_3.setColumnCount(2)
        self.tableWidget_3.setRowCount(100)
        self.tableWidget_3.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tableWidget_3.setAlternatingRowColors(True)
        self.tableWidget_3.resizeColumnToContents(True)
        self.tableWidget_3.horizontalHeader().setStretchLastSection(True)
        self.tableWidget_3.cellClicked.connect(self.maincategory_tablewidget_changed2)


        self.Frame_4 = QtWidgets.QFrame(self.horizontalFrame)
        self.Frame_4.setGeometry(QtCore.QRect(540, 70, 351, 351))
        self.Frame_4.setObjectName("Frame_4")
        self.label_4 = QtWidgets.QLabel(self.Frame_4)
        self.label_4.setGeometry(QtCore.QRect(0, 0, 60, 16))
        self.label_4.setObjectName("label_4")
        self.tableWidget_4 = QtWidgets.QTableWidget(self.Frame_4)
        self.tableWidget_4.setGeometry(QtCore.QRect(0, 20, 351, 331))
        self.tableWidget_4.setObjectName("tableWidget_4")
        self.tableWidget_4.setColumnCount(2)
        self.tableWidget_4.setRowCount(100)
        self.tableWidget_4.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tableWidget_4.setAlternatingRowColors(True)
        self.tableWidget_4.resizeColumnToContents(True)
        self.tableWidget_4.horizontalHeader().setStretchLastSection(True)
        self.tableWidget_4.cellClicked.connect(self.middlecategory_tablewidget_changed2)

        self.Frame_5 = QtWidgets.QFrame(self.horizontalFrame)
        self.Frame_5.setGeometry(QtCore.QRect(540, 430, 351, 351))
        self.Frame_5.setObjectName("Frame_5")
        self.label_5 = QtWidgets.QLabel(self.Frame_5)
        self.label_5.setGeometry(QtCore.QRect(0, 0, 60, 16))
        self.label_5.setObjectName("label_5")
        self.tableWidget_5 = QtWidgets.QTableWidget(self.Frame_5)
        self.tableWidget_5.setGeometry(QtCore.QRect(0, 20, 351, 331))
        self.tableWidget_5.setObjectName("tableWidget_5")
        self.tableWidget_5.setColumnCount(2)
        self.tableWidget_5.setRowCount(100)
        self.tableWidget_5.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tableWidget_5.setAlternatingRowColors(True)
        self.tableWidget_5.resizeColumnToContents(True)
        self.tableWidget_5.horizontalHeader().setStretchLastSection(True)
        self.tableWidget_5.cellClicked.connect(self.subcategory_tablewidget_changed2)







        self.Frame_6 = QtWidgets.QFrame(self.horizontalFrame)
        self.Frame_6.setGeometry(QtCore.QRect(910, 70, 351, 351))
        self.Frame_6.setObjectName("Frame_6")
        self.label_6 = QtWidgets.QLabel(self.Frame_6)
        self.label_6.setGeometry(QtCore.QRect(0, 0, 60, 16))
        self.label_6.setObjectName("label_6")
        self.tableWidget_6 = QtWidgets.QTableWidget(self.Frame_6)
        self.tableWidget_6.setGeometry(QtCore.QRect(0, 20, 351, 331))
        self.tableWidget_6.setObjectName("tableWidget_6")
        self.tableWidget_6.setColumnCount(2)
        self.tableWidget_6.setRowCount(100)
        self.tableWidget_6.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tableWidget_6.setAlternatingRowColors(True)
        self.tableWidget_6.resizeColumnToContents(True)
        self.tableWidget_6.horizontalHeader().setStretchLastSection(True)
        self.tableWidget_6.cellClicked.connect(self.option1_tablewidget_changed2)


        self.Frame_7 = QtWidgets.QFrame(self.horizontalFrame)
        self.Frame_7.setGeometry(QtCore.QRect(910, 430, 351, 351))
        self.Frame_7.setObjectName("Frame_7")
        self.label_7 = QtWidgets.QLabel(self.Frame_7)
        self.label_7.setGeometry(QtCore.QRect(0, 0, 60, 16))
        self.label_7.setObjectName("label_7")
        self.tableWidget_7 = QtWidgets.QTableWidget(self.Frame_7)
        self.tableWidget_7.setGeometry(QtCore.QRect(0, 20, 351, 331))
        self.tableWidget_7.setObjectName("tableWidget_7")
        self.tableWidget_7.setColumnCount(2)
        self.tableWidget_7.setRowCount(100)
        self.tableWidget_7.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tableWidget_7.setAlternatingRowColors(True)
        self.tableWidget_7.resizeColumnToContents(True)
        self.tableWidget_7.horizontalHeader().setStretchLastSection(True)
        self.tableWidget_7.cellClicked.connect(self.option2_tablewidget_changed2)


        self.label_8 = QtWidgets.QLabel(self.horizontalFrame)
        self.label_8.setGeometry(QtCore.QRect(10, 10, 81, 16))
        self.label_8.setObjectName("label_8")
        self.label_9= QtWidgets.QLabel(self.horizontalFrame)
        self.label_9.setGeometry(QtCore.QRect(270, 10, 81, 16))
        self.label_9.setObjectName("label_9")


        self.comboBox = QtWidgets.QComboBox(self.horizontalFrame)
        self.comboBox.setGeometry(QtCore.QRect(980, 20, 141, 41))
        self.comboBox.setObjectName("comboBox")

        self.textEdit = QtWidgets.QTextEdit(self.horizontalFrame)
        self.textEdit.setGeometry(QtCore.QRect(10, 30, 251, 31))
        self.textEdit.setObjectName("textEdit")
        self.textEdit.setTextInteractionFlags(QtCore.Qt.TextSelectableByKeyboard | QtCore.Qt.TextSelectableByMouse)
        self.textEdit_2 = QtWidgets.QTextEdit(self.horizontalFrame)
        self.textEdit_2.setGeometry(QtCore.QRect(270, 30, 251, 31))
        self.textEdit_2.setObjectName("textEdit_2")
        self.textEdit_2.setTextInteractionFlags(QtCore.Qt.TextSelectableByKeyboard | QtCore.Qt.TextSelectableByMouse)

        self.pushButton = QtWidgets.QPushButton(self.horizontalFrame)
        self.pushButton.setGeometry(QtCore.QRect(1130, 20, 131, 41))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.setStyleSheet("color: rgb(58, 134, 255);"
	                                  "background-color: white;"
	                                  "border: 2px solid rgb(58, 134, 255);"
	                                  "border-radius: 20px;")
        self.pushButton_3 = QtWidgets.QPushButton(self.horizontalFrame)
        self.pushButton_3.setGeometry(QtCore.QRect(770, 20, 131, 41))
        self.pushButton_3.setAutoDefault(False)
        self.pushButton_3.setDefault(False)
        self.pushButton_3.setFlat(False)
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.setStyleSheet("color: rgb(58, 134, 255);"
	                                    "background-color: white;"
	                                    "border: 2px solid rgb(58, 134, 255);"
	                                    "border-radius: 20px;")

        mainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(mainWindow)
        QtCore.QMetaObject.connectSlotsByName(mainWindow)

    def retranslateUi(self, mainWindow):
        _translate = QtCore.QCoreApplication.translate
        mainWindow.setWindowTitle(_translate("mainWindow", "MainWindow"))
        self.label_1.setText(_translate("mainWindow", "회사"))
        self.label_2.setText(_translate("mainWindow", "품목군"))
        self.label_3.setText(_translate("mainWindow", "대분류"))
        self.label_4.setText(_translate("mainWindow", "중분류"))
        self.label_5.setText(_translate("mainWindow", "소분류"))
        self.label_6.setText(_translate("mainWindow", "옵션1"))
        self.label_7.setText(_translate("mainWindow", "옵션2"))
        self.label_8.setText(_translate("mainWindow", "품목 코드"))
        self.label_9.setText(_translate("mainWindow", "품목명 코드"))
        self.pushButton.setText(_translate("mainWindow", "CSV 파일 열기"))
        self.pushButton_3.setText(_translate("mainWindow", "수정 모드"))
        self.comboBox.setItemText(0, _translate("MainWindow", "선택"))
        self.comboBox.setItemText(1, _translate("MainWindow", "회사"))
        self.comboBox.setItemText(2, _translate("MainWindow", "품목군"))
        self.comboBox.setItemText(3, _translate("MainWindow", "대분류"))
        self.comboBox.setItemText(4, _translate("MainWindow", "중분류"))
        self.comboBox.setItemText(5, _translate("MainWindow", "소분류"))
        self.comboBox.setItemText(6, _translate("MainWindow", "옵션1"))
        self.comboBox.setItemText(7, _translate("MainWindow", "옵션2"))


    def cleaner_combobox_tableWidget(self, where):
        if where < 7:
            self.tableWidget_7.clear()

            if where < 6:
                self.tableWidget_6.clear()

                if where < 5:
                    self.tableWidget_5.clear()

                    if where < 4:
                        self.tableWidget_4.clear()

                        if where < 3:
                            self.tableWidget_3.clear()

                            if where < 2:
                                self.tableWidget_2.clear()

                                if where < 1:
                                    self.tableWidget.clear()

    def company_tablewidget_set(self):
        df = pd.read_csv(list_csv_name[0])
        for i in range(0, len(df.index.tolist()), 1):
            for j in range(1, 3, 1):
                if str(df.iat[i, j]) != 'nan':
                    item = QTableWidgetItem(str(df.iat[i, j]))
                    self.tableWidget.setItem(i, j - 1, item)



    def company_tablewidget_changed2(self):

        row = self.tableWidget.currentIndex().row()
        if self.tableWidget.item(row,1) != self.tableWidget99.item(1,1):
            codename = self.tableWidget.item(row, 1).text()
            self.cleaner_combobox_tableWidget(1)
            current_select2 = codename
            df_before = pd.read_csv(list_csv_name[0])
            df_before = df_before.applymap(str)
            df_before = df_before[df_before['코드명'] == current_select2]
            code = df_before.iat[0, 1]
            df = pd.read_csv(list_csv_name[1])
            df = df.applymap(str)
            df1 = df[df['회사'] == code]
            print(current_select2)
            print(df_before)
            print(code)
            print(df1)
            for i in range(0, len(df1.index.tolist()), 1):
                for j in range(1, 3, 1):
                    if str(df1.iat[i, j]) != 'nan':
                        item = QTableWidgetItem(str(df1.iat[i, j]))
                        self.tableWidget_2.setItem(i, j - 1, item)
            self.code_logging(1, code)
            self.code_name_logging(1, codename)
        else:
            self.cleaner_combobox_tableWidget(1)


    def products_tablewidget_changed2(self):
        row = self.tableWidget_2.currentIndex().row()
        if self.tableWidget_2.item(row, 1) != self.tableWidget99.item(1, 1):
            codename = self.tableWidget_2.item(row, 1).text()
            current_select2 = codename
            df_before = pd.read_csv(list_csv_name[1])
            df_before = df_before.applymap(str)
            df_before = df_before[df_before['코드명'] == current_select2]
            code = df_before.iat[0, 1]
            df = pd.read_csv(list_csv_name[2])
            df = df.applymap(str)
            df1 = df[df['품목군코드'] == code]
            # 디버깅용

            print(current_select2)
            print(df_before)
            print(code)
            print(df1)
            self.cleaner_combobox_tableWidget(2)
            for i in range(0, len(df1.index.tolist()), 1):
                for j in range(1, 3, 1):
                    if str(df1.iat[i, j]) != 'nan':
                        item = QTableWidgetItem(str(df1.iat[i, j]))
                        self.tableWidget_3.setItem(i, j - 1, item)
            self.code_logging(2, code)
            self.code_name_logging(2, codename)
        else:
            self.cleaner_combobox_tableWidget(2)

    def maincategory_tablewidget_changed2(self):
        row = self.tableWidget_3.currentIndex().row()
        if self.tableWidget_3.item(row, 1) != self.tableWidget99.item(1, 1):
            codename = self.tableWidget_3.item(row, 1).text()
            current_select2 = codename
            df_before = pd.read_csv(list_csv_name[2])
            df_before = df_before.applymap(str)
            df_before = df_before[df_before['코드명'] == current_select2]
            code = df_before.iat[0, 1]
            df = pd.read_csv(list_csv_name[3])
            df = df.applymap(str)
            df1 = df[df['대분류코드'] == code]
            # 디버깅용
            print(current_select2)
            print(df_before)
            print(code)
            print(df1)
            self.cleaner_combobox_tableWidget(3)
            for i in range(0, len(df1.index.tolist()), 1):
                for j in range(1, 3, 1):
                    if str(df1.iat[i, j]) != 'nan':
                        item = QTableWidgetItem(str(df1.iat[i, j]))
                        self.tableWidget_4.setItem(i, j - 1, item)
            self.code_logging(3, code)
            self.code_name_logging(3, codename)
        else:
            self.cleaner_combobox_tableWidget(3)

    def middlecategory_tablewidget_changed2(self):
        row = self.tableWidget_4.currentIndex().row()
        if self.tableWidget_4.item(row, 1) != self.tableWidget99.item(1, 1):
            codename = self.tableWidget_4.item(row, 1).text()
            current_select2 = codename
            df_before = pd.read_csv(list_csv_name[3])
            df_before = df_before.applymap(str)
            df_before = df_before[df_before['코드명'] == current_select2]
            code = df_before.iat[0, 1]
            df = pd.read_csv(list_csv_name[4])
            df = df.applymap(str)
            df1 = df[df['중분류코드'] == code]
            # 디버깅용
            print(current_select2)
            print(df_before)
            print(code)
            print(df1)
            self.cleaner_combobox_tableWidget(4)
            for i in range(0, len(df1.index.tolist()), 1):
                for j in range(1, 3, 1):
                    if str(df1.iat[i, j]) != 'nan':
                        item = QTableWidgetItem(str(df1.iat[i, j]))
                        self.tableWidget_5.setItem(i, j - 1, item)
            self.code_logging(4, code)
            self.code_name_logging(4, codename)
        else:
            self.cleaner_combobox_tableWidget(4)

    def subcategory_tablewidget_changed2(self):
        row = self.tableWidget_5.currentIndex().row()
        if self.tableWidget_5.item(row, 1) != self.tableWidget99.item(1, 1):
            codename = self.tableWidget_5.item(row, 1).text()
            current_select2 = codename
            df_before = pd.read_csv(list_csv_name[4])
            df_before = df_before.applymap(str)
            df_before = df_before[df_before['코드명'] == current_select2]
            code = df_before.iat[0, 1]
            df = pd.read_csv(list_csv_name[5])
            df = df.applymap(str)
            df1 = df[df['소분류코드'] == code]
            # 디버깅용
            print(current_select2)
            print(df_before)
            print(code)
            print(df1)
            self.cleaner_combobox_tableWidget(5)
            for i in range(0, len(df1.index.tolist()), 1):
                for j in range(1, 3, 1):
                    if str(df1.iat[i, j]) != 'nan':
                        item = QTableWidgetItem(str(df1.iat[i, j]))
                        self.tableWidget_6.setItem(i, j - 1, item)
            self.code_logging(5, code)
            self.code_name_logging(5, codename)
        else:
            self.cleaner_combobox_tableWidget(5)

    def option1_tablewidget_changed2(self):
        row = self.tableWidget_6.currentIndex().row()
        if self.tableWidget_6.item(row, 1) != self.tableWidget99.item(1, 1):
            codename = self.tableWidget_6.item(row, 1).text()
            current_select2 = codename
            df_before = pd.read_csv(list_csv_name[5])
            df_before = df_before.applymap(str)
            df_before = df_before[df_before['코드명'] == current_select2]
            code = df_before.iat[0, 1]
            df = pd.read_csv(list_csv_name[6])
            df = df.applymap(str)
            df1 = df[df['옵션1'] == code]
            # 디버깅용
            print(current_select2)
            print(df_before)
            print(code)
            print(df1)
            self.cleaner_combobox_tableWidget(6)
            for i in range(0, len(df1.index.tolist()), 1):
                for j in range(1, 3, 1):
                    if str(df1.iat[i, j]) != 'nan':
                        item = QTableWidgetItem(str(df1.iat[i, j]))
                        self.tableWidget_7.setItem(i, j - 1, item)
            self.code_logging(6, code)
            self.code_name_logging(6, codename)
        else:
            self.cleaner_combobox_tableWidget(6)

    def option2_tablewidget_changed2(self):
        row = self.tableWidget_7.currentIndex().row()
        if self.tableWidget_7.item(row, 1) != self.tableWidget99.item(1, 1):
            codename = self.tableWidget_7.item(row, 1).text()
            current_select2 = codename
            df_before = pd.read_csv(list_csv_name[5])
            df_before = df_before.applymap(str)
            df_before = df_before[df_before['코드명'] == current_select2]
            code = df_before.iat[0, 1]
            self.code_logging(7, code)
            self.code_name_logging(7, codename)
    def csv_list(self, MainWindow):

        _translate = QtCore.QCoreApplication.translate

        self.comboBox.clear()
        self.comboBox.setIconSize
        for i in range(8):
            self.comboBox.insertItem(i, 'Item')
        #self.comboBox.activated.connect(self.selectedcsvnumber)
        #self.button2.clicked.connect(lambda: self.open_button_event(True))

    def code_logging(self, where, code):
        if where == 1:
            self.textEdit.clear()
            code_log[0] = code
            code_log[1] = code_log_reset[1]
            code_log[2] = code_log_reset[2]
            code_log[3] = code_log_reset[3]
            code_log[4] = code_log_reset[4]
            code_log[5] = code_log_reset[5]
            code_log[6] = code_log_reset[6]
            result = ' '.join(s for s in code_log)
            self.textEdit.setText(result)
        elif where == 2:
            self.textEdit.clear()
            code_log[1] = code
            code_log[2] = code_log_reset[2]
            code_log[3] = code_log_reset[3]
            code_log[4] = code_log_reset[4]
            code_log[5] = code_log_reset[5]
            code_log[6] = code_log_reset[6]
            result = ' '.join(s for s in code_log)
            self.textEdit.setText(result)
        elif where == 3:
            self.textEdit.clear()
            code_log[2] = code
            code_log[3] = code_log_reset[3]
            code_log[4] = code_log_reset[4]
            code_log[5] = code_log_reset[5]
            code_log[6] = code_log_reset[6]
            result = ' '.join(s for s in code_log)
            self.textEdit.setText(result)
        elif where == 4:
            self.textEdit.clear()
            code_log[3] = code
            code_log[4] = code_log_reset[4]
            code_log[5] = code_log_reset[5]
            code_log[6] = code_log_reset[6]
            result = ' '.join(s for s in code_log)
            self.textEdit.setText(result)
        elif where == 5:
            self.textEdit.clear()
            code_log[4] = code
            code_log[5] = code_log_reset[5]
            code_log[6] = code_log_reset[6]
            result = ' '.join(s for s in code_log)
            self.textEdit.setText(result)
        elif where == 6:
            self.textEdit.clear()
            code_log[5] = code
            code_log[6] = code_log_reset[6]
            result = ' '.join(s for s in code_log)
            self.textEdit.setText(result)
        elif where == 7:
            self.textEdit.clear()
            code_log[6] = code
            result = ' '.join(s for s in code_log)
            self.textEdit.setText(result)
    def code_name_logging(self, where, codename):
        if where == 1:
            self.textEdit_2.clear()
            code_name_log[0] = codename
            code_name_log[1] = code_log_reset[1]
            code_name_log[2] = code_log_reset[2]
            code_name_log[3] = code_log_reset[3]
            code_name_log[4] = code_log_reset[4]
            code_name_log[5] = code_log_reset[5]
            code_name_log[6] = code_log_reset[6]
            result = ' '.join(s for s in code_name_log)
            self.textEdit_2.setText(result)
        elif where == 2:
            self.textEdit_2.clear()
            code_name_log[1] = codename
            code_name_log[2] = code_log_reset[2]
            code_name_log[3] = code_log_reset[3]
            code_name_log[4] = code_log_reset[4]
            code_name_log[5] = code_log_reset[5]
            code_name_log[6] = code_log_reset[6]
            result = ' '.join(s for s in code_name_log)
            self.textEdit_2.setText(result)
        elif where == 3:
            self.textEdit_2.clear()
            code_name_log[2] = codename
            code_name_log[3] = code_log_reset[3]
            code_name_log[4] = code_log_reset[4]
            code_name_log[5] = code_log_reset[5]
            code_name_log[6] = code_log_reset[6]
            result = ' '.join(s for s in code_name_log)
            self.textEdit_2.setText(result)
        elif where == 4:
            self.textEdit_2.clear()
            code_name_log[3] = codename
            code_name_log[4] = code_log_reset[4]
            code_name_log[5] = code_log_reset[5]
            code_name_log[6] = code_log_reset[6]
            result = ' '.join(s for s in code_name_log)
            self.textEdit_2.setText(result)
        elif where == 5:
            self.textEdit_2.clear()
            code_name_log[4] = codename
            code_name_log[5] = code_log_reset[5]
            code_name_log[6] = code_log_reset[6]
            result = ' '.join(s for s in code_name_log)
            self.textEdit_2.setText(result)
        elif where == 6:
            self.textEdit_2.clear()
            code_name_log[5] = codename
            code_name_log[6] = code_log_reset[6]
            result = ' '.join(s for s in code_name_log)
            self.textEdit_2.setText(result)
        elif where == 7:
            self.textEdit_2.clear()
            code_name_log[6] = codename
            result = ' '.join(s for s in code_name_log)
            self.textEdit_2.setText(result)

    def open_button_event(self, bool):
        if bool:
            csvindex = self.comboBox_9.currentIndex() - 1
            os.startfile(list_csv_name[csvindex])





if __name__ == "__main__":
    import sys

    global list_csv
    global list_csv_name
    global list_option
    global selected_csv_number
    global code_log
    global code_log_reset
    global code_name_log


    app = QtWidgets.QApplication(sys.argv)
    #app.setStyleSheet(qdarktheme.load_stylesheet())
    #app.setStyleSheet(qdarkstyle.load_stylesheet(palette=LightPalette))

    stylesheet = qtvsc.load_stylesheet(qtvsc.Theme.LIGHT_VS)
    app.setStyleSheet(stylesheet)
    mainWindow = QtWidgets.QMainWindow()


    list_option = ['선택','회사','품목군','대분류','중분류','소분류','옵션1','옵션2']
    list_csv_name = ['Companies.csv', 'Products.csv', 'MainCategory.csv', 'MiddleCategory.csv', 'SubCategory.csv',
                     'Options1.csv', 'Options2.csv']
    list_csv = ['companies', 'products', 'maincategory', 'middlecategory', 'subcategory',
                'options1', 'options2']
    code_log = ['1', '2', '3', '4', '5', '6', '7']
    code_log_reset = ['', '', '', '', '', '', '']
    code_name_log = ['1', '2', '3', '4', '5', '6', '7']





    ui = Ui_mainWindow()

    ui.setupUi(mainWindow)
    ui.csv_list(mainWindow)

    mainWindow.show()
    sys.exit(app.exec_())
