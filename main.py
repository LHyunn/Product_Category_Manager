# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '영광테크.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os

import pandas as pd
import qtvscodestyle as qtvsc
from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import QTableWidgetItem

os.environ['QT_API'] = 'pyqt5'
os.environ["QT_AUTO_SCREEN_SCALE_FACTOR"] = "1"


class Ui_mainWindow(object):
    def setupUi(self, mainWindow):

        mainWindow.setObjectName("mainWindow")
        mainWindow.resize(1280, 900)
        mainWindow.setMinimumSize(QtCore.QSize(1280, 900))
        mainWindow.setMaximumSize(QtCore.QSize(1280, 900))
        self.statusbar = QtWidgets.QStatusBar(mainWindow)
        self.statusbar.setObjectName("statusbar")
        mainWindow.setStatusBar(self.statusbar)


        self.centralwidget = QtWidgets.QWidget(mainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalFrame = QtWidgets.QFrame(self.centralwidget)
        self.horizontalFrame.setGeometry(QtCore.QRect(0, 10, 1280, 861))
        self.horizontalFrame.setObjectName("horizontalFrame")
        self.tableWidget99 = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget99.setRowCount(1)
        self.tableWidget99.setColumnCount(1)  # 이부분 tableWidget의 none값의 타입을 모르겠고 인터넷에서도 관련 문서를 찾을 수가 없어서 이렇게 나둠. 비어있는지 비교하기 위한 값.
        self.tableWidget99.hide()


        self.Frame_1 = QtWidgets.QFrame(self.horizontalFrame)
        self.Frame_1.setGeometry(QtCore.QRect(10, 70, 511, 251))
        self.Frame_1.setObjectName("Frame_1")
        self.label_1 = QtWidgets.QLabel(self.Frame_1)
        self.label_1.setGeometry(QtCore.QRect(10, 10, 60, 16))
        self.label_1.setObjectName("label_1")
        self.checkBox = QtWidgets.QCheckBox(self.Frame_1)
        self.checkBox.setGeometry(QtCore.QRect(410, 5, 87, 20))
        self.checkBox.setObjectName("checkBox")
        self.checkBox.toggle()
        self.tableWidget = QtWidgets.QTableWidget(self.Frame_1)
        self.tableWidget.setGeometry(QtCore.QRect(0, 40, 511, 211))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(2)
        self.tableWidget.setRowCount(10)
        self.tableWidget.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tableWidget.setAlternatingRowColors(True)
        self.tableWidget.resizeColumnToContents(True)
        self.tableWidget.horizontalHeader().setStretchLastSection(True)
        self.tableWidget.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tableWidget.cellClicked.connect(self.company_tablewidget_changed2)

        self.company_tablewidget_set()

        self.Frame_2 = QtWidgets.QFrame(self.horizontalFrame)
        self.Frame_2.setGeometry(QtCore.QRect(10, 330, 511, 251))
        self.Frame_2.setObjectName("Frame_2")
        self.label_2 = QtWidgets.QLabel(self.Frame_2)
        self.label_2.setGeometry(QtCore.QRect(10, 10, 60, 16))
        self.label_2.setObjectName("label_2")
        self.checkBox_2 = QtWidgets.QCheckBox(self.Frame_2)
        self.checkBox_2.setGeometry(QtCore.QRect(410, 5, 87, 20))
        self.checkBox_2.setObjectName("checkBox_2")
        self.checkBox_2.toggle()
        self.tableWidget_2 = QtWidgets.QTableWidget(self.Frame_2)
        self.tableWidget_2.setGeometry(QtCore.QRect(0, 40, 511, 211))
        self.tableWidget_2.setObjectName("tableWidget_2")
        self.tableWidget_2.setColumnCount(2)
        self.tableWidget_2.setRowCount(100)
        self.tableWidget_2.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tableWidget_2.setAlternatingRowColors(True)
        self.tableWidget_2.resizeColumnToContents(True)
        self.tableWidget_2.horizontalHeader().setStretchLastSection(True)
        self.tableWidget_2.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tableWidget_2.cellClicked.connect(self.products_tablewidget_changed2)

        self.Frame_3 = QtWidgets.QFrame(self.horizontalFrame)
        self.Frame_3.setGeometry(QtCore.QRect(10, 590, 511, 251))
        self.Frame_3.setObjectName("Frame_3")
        self.label_3 = QtWidgets.QLabel(self.Frame_3)
        self.label_3.setGeometry(QtCore.QRect(10, 10, 60, 16))
        self.label_3.setObjectName("label_3")
        self.checkBox_3 = QtWidgets.QCheckBox(self.Frame_3)
        self.checkBox_3.setGeometry(QtCore.QRect(410, 5, 87, 20))
        self.checkBox_3.setObjectName("checkBox_3")
        self.checkBox_3.toggle()
        self.tableWidget_3 = QtWidgets.QTableWidget(self.Frame_3)
        self.tableWidget_3.setGeometry(QtCore.QRect(0, 40, 511, 211))
        self.tableWidget_3.setObjectName("tableWidget_3")
        self.tableWidget_3.setColumnCount(2)
        self.tableWidget_3.setRowCount(100)
        self.tableWidget_3.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tableWidget_3.setAlternatingRowColors(True)
        self.tableWidget_3.resizeColumnToContents(True)
        self.tableWidget_3.horizontalHeader().setStretchLastSection(True)
        self.tableWidget_3.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tableWidget_3.cellClicked.connect(self.maincategory_tablewidget_changed2)

        self.Frame_4 = QtWidgets.QFrame(self.horizontalFrame)
        self.Frame_4.setGeometry(QtCore.QRect(540, 70, 351, 381))
        self.Frame_4.setObjectName("Frame_4")
        self.label_4 = QtWidgets.QLabel(self.Frame_4)
        self.label_4.setGeometry(QtCore.QRect(10, 10, 60, 16))
        self.label_4.setObjectName("label_4")
        self.checkBox_4 = QtWidgets.QCheckBox(self.Frame_4)
        self.checkBox_4.setGeometry(QtCore.QRect(250, 5, 87, 20))
        self.checkBox_4.setObjectName("checkBox_4")
        self.checkBox_4.toggle()
        self.tableWidget_4 = QtWidgets.QTableWidget(self.Frame_4)
        self.tableWidget_4.setGeometry(QtCore.QRect(0, 40, 351, 331))
        self.tableWidget_4.setObjectName("tableWidget_4")
        self.tableWidget_4.setColumnCount(2)
        self.tableWidget_4.setRowCount(100)
        self.tableWidget_4.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tableWidget_4.setAlternatingRowColors(True)
        self.tableWidget_4.resizeColumnToContents(True)
        self.tableWidget_4.horizontalHeader().setStretchLastSection(True)
        self.tableWidget_4.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tableWidget_4.cellClicked.connect(self.middlecategory_tablewidget_changed2)

        self.Frame_5 = QtWidgets.QFrame(self.horizontalFrame)
        self.Frame_5.setGeometry(QtCore.QRect(540, 460, 351, 381))
        self.Frame_5.setObjectName("Frame_5")
        self.label_5 = QtWidgets.QLabel(self.Frame_5)
        self.label_5.setGeometry(QtCore.QRect(10, 10, 60, 16))
        self.label_5.setObjectName("label_5")
        self.checkBox_5 = QtWidgets.QCheckBox(self.Frame_5)
        self.checkBox_5.setGeometry(QtCore.QRect(250, 5, 87, 20))
        self.checkBox_5.setObjectName("checkBox_5")
        self.checkBox_5.toggle()
        self.tableWidget_5 = QtWidgets.QTableWidget(self.Frame_5)
        self.tableWidget_5.setGeometry(QtCore.QRect(0, 40, 351, 331))
        self.tableWidget_5.setObjectName("tableWidget_5")
        self.tableWidget_5.setColumnCount(2)
        self.tableWidget_5.setRowCount(100)
        self.tableWidget_5.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tableWidget_5.setAlternatingRowColors(True)
        self.tableWidget_5.resizeColumnToContents(True)
        self.tableWidget_5.horizontalHeader().setStretchLastSection(True)
        self.tableWidget_5.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tableWidget_5.cellClicked.connect(self.subcategory_tablewidget_changed2)

        self.Frame_6 = QtWidgets.QFrame(self.horizontalFrame)
        self.Frame_6.setGeometry(QtCore.QRect(910, 70, 351, 381))
        self.Frame_6.setObjectName("Frame_6")
        self.label_6 = QtWidgets.QLabel(self.Frame_6)
        self.label_6.setGeometry(QtCore.QRect(10, 10, 60, 16))
        self.label_6.setObjectName("label_6")
        self.checkBox_6 = QtWidgets.QCheckBox(self.Frame_6)
        self.checkBox_6.setGeometry(QtCore.QRect(250, 5, 87, 20))
        self.checkBox_6.setObjectName("checkBox_6")
        self.checkBox_6.toggle()
        self.tableWidget_6 = QtWidgets.QTableWidget(self.Frame_6)
        self.tableWidget_6.setGeometry(QtCore.QRect(0, 40, 351, 331))
        self.tableWidget_6.setObjectName("tableWidget_6")
        self.tableWidget_6.setColumnCount(2)
        self.tableWidget_6.setRowCount(100)
        self.tableWidget_6.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tableWidget_6.setAlternatingRowColors(True)
        self.tableWidget_6.resizeColumnToContents(True)
        self.tableWidget_6.horizontalHeader().setStretchLastSection(True)
        self.tableWidget_6.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tableWidget_6.cellClicked.connect(self.option1_tablewidget_changed2)

        self.Frame_7 = QtWidgets.QFrame(self.horizontalFrame)
        self.Frame_7.setGeometry(QtCore.QRect(910, 460, 351, 381))
        self.Frame_7.setObjectName("Frame_7")
        self.label_7 = QtWidgets.QLabel(self.Frame_7)
        self.label_7.setGeometry(QtCore.QRect(10, 10, 60, 16))
        self.label_7.setObjectName("label_7")
        self.checkBox_7 = QtWidgets.QCheckBox(self.Frame_7)
        self.checkBox_7.setGeometry(QtCore.QRect(250, 5, 87, 20))
        self.checkBox_7.setObjectName("checkBox_7")
        self.checkBox_7.toggle()
        self.tableWidget_7 = QtWidgets.QTableWidget(self.Frame_7)
        self.tableWidget_7.setGeometry(QtCore.QRect(0, 40, 351, 331))
        self.tableWidget_7.setObjectName("tableWidget_7")
        self.tableWidget_7.setColumnCount(2)
        self.tableWidget_7.setRowCount(100)
        self.tableWidget_7.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tableWidget_7.setAlternatingRowColors(True)
        self.tableWidget_7.resizeColumnToContents(True)
        self.tableWidget_7.horizontalHeader().setStretchLastSection(True)
        self.tableWidget_7.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tableWidget_7.cellClicked.connect(self.option2_tablewidget_changed2)

        self.label_8 = QtWidgets.QLabel(self.horizontalFrame)
        self.label_8.setGeometry(QtCore.QRect(10, 10, 81, 16))
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.horizontalFrame)
        self.label_9.setGeometry(QtCore.QRect(270, 10, 81, 16))
        self.label_9.setObjectName("label_9")

        self.comboBox = QtWidgets.QComboBox(self.horizontalFrame)
        self.comboBox.setGeometry(QtCore.QRect(980, 20, 141, 41))
        self.comboBox.setObjectName("comboBox")

        self.textEdit = QtWidgets.QTextEdit(self.horizontalFrame)
        self.textEdit.setGeometry(QtCore.QRect(10, 30, 251, 31))
        self.textEdit.setObjectName("textEdit")


        self.textEdit_2 = QtWidgets.QTextEdit(self.horizontalFrame)
        self.textEdit_2.setGeometry(QtCore.QRect(270, 30, 341, 31))
        self.textEdit_2.setObjectName("textEdit_2")
        self.textEdit_2.setTextInteractionFlags(QtCore.Qt.TextSelectableByKeyboard | QtCore.Qt.TextSelectableByMouse)

        self.pushButton = QtWidgets.QPushButton(self.horizontalFrame)
        self.pushButton.setGeometry(QtCore.QRect(1130, 20, 131, 41))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.setStyleSheet("color: rgb(58, 134, 255);"
                                      "background-color: white;"
                                      "border: 2px solid rgb(58, 134, 255);"
                                      "border-radius: 20px;")
        self.pushButton.setCheckable(True)
        self.pushButton.clicked.connect(self.open_button_event)

        self.pushButton_3 = QtWidgets.QPushButton(self.horizontalFrame)
        self.pushButton_3.setGeometry(QtCore.QRect(770, 20, 131, 41))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.setStyleSheet("color: rgb(58, 134, 255);"
                                        "background-color: white;"
                                        "border: 2px solid rgb(58, 134, 255);"
                                        "border-radius: 20px;")
        self.pushButton_3.setCheckable(True)
        self.pushButton_3.clicked.connect(self.changeColor)

        mainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(mainWindow)
        QtCore.QMetaObject.connectSlotsByName(mainWindow)

        self.statusbar.showMessage("상태 : 정상")



    def changeColor(self):
        global total
        # if button is checked
        if self.pushButton_3.isChecked():

            # setting background color to light-blue
            self.pushButton_3.setStyleSheet("color: white;"
                                            "background-color: rgb(58, 134, 255);"
                                            "border-radius: 20px;")
            self.pushButton_3.setText("수정 모드 켜짐")
            self.tableWidget.setEditTriggers(QtWidgets.QAbstractItemView.DoubleClicked)
            self.tableWidget_2.setEditTriggers(QtWidgets.QAbstractItemView.DoubleClicked)
            self.tableWidget_3.setEditTriggers(QtWidgets.QAbstractItemView.DoubleClicked)
            self.tableWidget_4.setEditTriggers(QtWidgets.QAbstractItemView.DoubleClicked)
            self.tableWidget_5.setEditTriggers(QtWidgets.QAbstractItemView.DoubleClicked)
            self.tableWidget_6.setEditTriggers(QtWidgets.QAbstractItemView.DoubleClicked)
            self.tableWidget_7.setEditTriggers(QtWidgets.QAbstractItemView.DoubleClicked)

            self.statusbar.showMessage("수정 가능한 상태")

        # if it is unchecked
        else:

            # set background color back to light-grey
            self.pushButton_3.setStyleSheet("color: rgb(58, 134, 255);"
                                            "background-color: white;"
                                            "border: 2px solid rgb(58, 134, 255);"
                                            "border-radius: 20px;")
            self.pushButton_3.setText("수정 모드 꺼짐")
            self.tableWidget.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
            self.tableWidget_2.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
            self.tableWidget_3.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
            self.tableWidget_4.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
            self.tableWidget_5.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
            self.tableWidget_6.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
            self.tableWidget_7.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
            self.statusbar.showMessage("수정 완료")
            self.modify_mode_company()
            total.to_csv("total.csv", encoding='utf-8-sig', index=False)
            total = pd.read_csv("total.csv")
            if code_log[0] != ' ':
                self.modify_mode_product()
                total.to_csv("total.csv", encoding='utf-8-sig', index=False)
                total = pd.read_csv("total.csv")
                if code_log[1] != ' ':
                    self.modify_mode_maincategory()
                    total.to_csv("total.csv", encoding='utf-8-sig', index=False)
                    total = pd.read_csv("total.csv")
                    if code_log[2] != ' ':
                        self.modify_mode_middlecategory()
                        total.to_csv("total.csv", encoding='utf-8-sig', index=False)
                        total = pd.read_csv("total.csv")
                        if code_log[3] != ' ':
                            self.modify_mode_subcategory()
                            total.to_csv("total.csv", encoding='utf-8-sig', index=False)
                            total = pd.read_csv("total.csv")
                            if code_log[4] != ' ':
                                self.modify_mode_options1()
                                total.to_csv("total.csv", encoding='utf-8-sig', index=False)
                                total = pd.read_csv("total.csv")
                                if code_log[5] != ' ':
                                    self.modify_mode_options2()
                                    total.to_csv("total.csv", encoding='utf-8-sig', index=False)
                                    total = pd.read_csv("total.csv")
            total = total.drop_duplicates(keep='first')
            total = pd.read_csv("total.csv")

            self.cleaner_combobox_tableWidget(0)
            self.company_tablewidget_set()

            self.code_logging(0," ")
            self.code_name_logging(0, " ")

    def loading(self):
        df1 = pd.read_csv(list_csv_name[0])
        df2 = pd.read_csv(list_csv_name[1])
        df3 = pd.read_csv(list_csv_name[2])
        df4 = pd.read_csv(list_csv_name[3])
        df5 = pd.read_csv(list_csv_name[4])
        df6 = pd.read_csv(list_csv_name[5])
        df7 = pd.read_csv(list_csv_name[6])

        df1 = pd.concat([df1,df2,df3,df4,df5,df6,df7])
        df1.to_csv("total.csv", encoding='utf-8-sig', index=False)



    def retranslateUi(self, mainWindow):
        _translate = QtCore.QCoreApplication.translate
        mainWindow.setWindowTitle(_translate("mainWindow", "품목분류코드 생성기"))
        self.label_1.setText(_translate("mainWindow", "회사"))
        self.label_2.setText(_translate("mainWindow", "품목군"))
        self.label_3.setText(_translate("mainWindow", "대분류"))
        self.label_4.setText(_translate("mainWindow", "중분류"))
        self.label_5.setText(_translate("mainWindow", "소분류"))
        self.label_6.setText(_translate("mainWindow", "옵션1"))
        self.label_7.setText(_translate("mainWindow", "옵션2"))
        self.label_8.setText(_translate("mainWindow", "품목 코드"))
        self.label_9.setText(_translate("mainWindow", "품목명 코드"))
        self.pushButton.setText(_translate("mainWindow", "CSV 파일 열기"))
        self.pushButton_3.setText(_translate("mainWindow", "수정 모드 꺼짐"))
        self.comboBox.setItemText(0, _translate("MainWindow", "전체"))
        self.comboBox.setItemText(1, _translate("MainWindow", "회사"))
        self.comboBox.setItemText(2, _translate("MainWindow", "품목군"))
        self.comboBox.setItemText(3, _translate("MainWindow", "대분류"))
        self.comboBox.setItemText(4, _translate("MainWindow", "중분류"))
        self.comboBox.setItemText(5, _translate("MainWindow", "소분류"))
        self.comboBox.setItemText(6, _translate("MainWindow", "옵션1"))
        self.comboBox.setItemText(7, _translate("MainWindow", "옵션2"))
        self.checkBox.setText(_translate("mainWindow", "품목명 표시"))
        self.checkBox_4.setText(_translate("mainWindow", "품목명 표시"))
        self.checkBox_5.setText(_translate("mainWindow", "품목명 표시"))
        self.checkBox_2.setText(_translate("mainWindow", "품목명 표시"))
        self.checkBox_3.setText(_translate("mainWindow", "품목명 표시"))
        self.checkBox_7.setText(_translate("mainWindow", "품목명 표시"))
        self.checkBox_6.setText(_translate("mainWindow", "품목명 표시"))


    def cleaner_combobox_tableWidget(self, where):
        if where < 7:
            self.tableWidget_7.clear()
            if where < 6:
                self.tableWidget_6.clear()
                if where < 5:
                    self.tableWidget_5.clear()
                    if where < 4:
                        self.tableWidget_4.clear()
                        if where < 3:
                            self.tableWidget_3.clear()
                            if where < 2:
                                self.tableWidget_2.clear()
                                if where < 1:
                                    self.tableWidget.clear()

    def company_tablewidget_set(self):
        self.loading()
        df_company = total.loc[total['회사'].isna()]
        self.tableWidget.setRowCount(len(df_company.index.tolist()) + 1)
        for i in range(0, len(df_company.index.tolist()), 1):
            for j in range(1, 3, 1):
                if str(df_company.iat[i, j]) != 'nan':
                    item = QTableWidgetItem(str(df_company.iat[i, j]))
                    self.tableWidget.setItem(i, j - 1, item)
        self.statusbar.showMessage("회사 목록")


    def company_tablewidget_changed2(self):
        if self.pushButton_3.isChecked():
            print("수정 중이라 다음 테이블에 띄우지 않음.")
        else:
            self.cleaner_combobox_tableWidget(1)
            row = self.tableWidget.currentIndex().row()
            if self.tableWidget.item(row, 1) != self.tableWidget99.item(1, 1):
                codename = self.tableWidget.item(row, 1).text()
                code = self.tableWidget.item(row, 0).text()
                df_product = total.loc[total['회사'] == code]
                df_product = df_product.loc[df_product['품목군코드'].isna()]
                self.tableWidget_2.setRowCount(len(df_product.index.tolist()) + 5)
                for i in range(0, len(df_product.index.tolist()), 1):
                    for j in range(1, 3, 1):
                        if str(df_product.iat[i, j]) != 'nan':
                            item = QTableWidgetItem(str(df_product.iat[i, j]))
                            self.tableWidget_2.setItem(i, j - 1, item)

                self.code_logging(1, code)
                self.code_name_logging(1, codename)
                status = "회사 선택 : " + str(codename) + " 목록"
                self.statusbar.showMessage(status)
            else:
                self.cleaner_combobox_tableWidget(1)

    def products_tablewidget_changed2(self):
        if self.pushButton_3.isChecked():
            print("수정 중이라 다음 테이블에 띄우지 않음.")
        else:
            self.cleaner_combobox_tableWidget(2)
            row = self.tableWidget_2.currentIndex().row()
            if self.tableWidget_2.item(row, 1) != self.tableWidget99.item(1, 1):
                codename = self.tableWidget_2.item(row, 1).text()
                code = self.tableWidget_2.item(row, 0).text()
                df_main = total.loc[total['회사'] == code_log[0]]
                df_main = df_main.loc[df_main['품목군코드']== code]
                df_main = df_main.loc[df_main['대분류코드'].isna()]
                self.tableWidget_3.setRowCount(len(df_main.index.tolist()) + 5)
                for i in range(0, len(df_main.index.tolist()), 1):
                    for j in range(1, 3, 1):
                        if str(df_main.iat[i, j]) != 'nan':
                            item = QTableWidgetItem(str(df_main.iat[i, j]))
                            self.tableWidget_3.setItem(i, j - 1, item)
                self.code_logging(2, code)
                self.code_name_logging(2, codename)
                status = "품목군 선택 : " + str(codename) + " 목록"
                self.statusbar.showMessage(status)
            else:
                self.cleaner_combobox_tableWidget(2)

    def maincategory_tablewidget_changed2(self):
        if self.pushButton_3.isChecked():
            print("수정 중이라 다음 테이블에 띄우지 않음.")
        else:
            self.cleaner_combobox_tableWidget(3)
            row = self.tableWidget_3.currentIndex().row()
            if self.tableWidget_3.item(row, 1) != self.tableWidget99.item(1, 1):
                code = self.tableWidget_3.item(row, 0).text()
                codename = self.tableWidget_3.item(row, 1).text()
                df_mid = total.loc[total['회사'] == code_log[0]]
                df_mid = df_mid.loc[df_mid['품목군코드'] == code_log[1]]
                df_mid = df_mid.loc[df_mid['대분류코드'] == code]
                df_mid = df_mid.loc[df_mid['중분류코드'].isna()]
                self.tableWidget_4.setRowCount(len(df_mid.index.tolist()) + 5)
                for i in range(0, len(df_mid.index.tolist()), 1):
                    for j in range(1, 3, 1):
                        if str(df_mid.iat[i, j]) != 'nan':
                            item = QTableWidgetItem(str(df_mid.iat[i, j]))
                            self.tableWidget_4.setItem(i, j - 1, item)
                self.code_logging(3, code)
                self.code_name_logging(3, codename)
                status = "대분류 선택 : " + str(codename) + " 목록"
                self.statusbar.showMessage(status)
            else:
                self.cleaner_combobox_tableWidget(3)

    def middlecategory_tablewidget_changed2(self):
        if self.pushButton_3.isChecked():
            print("수정 중이라 다음 테이블에 띄우지 않음.")
        else:
            self.cleaner_combobox_tableWidget(4)
            row = self.tableWidget_4.currentIndex().row()
            if self.tableWidget_4.item(row, 1) != self.tableWidget99.item(1, 1):
                code = self.tableWidget_4.item(row, 0).text()
                codename = self.tableWidget_4.item(row, 1).text()
                df_sub = total.loc[total['회사'] == code_log[0]]
                df_sub = df_sub.loc[df_sub['품목군코드'] == code_log[1]]
                df_sub = df_sub.loc[df_sub['대분류코드'] == code_log[2]]
                df_sub = df_sub.loc[df_sub['중분류코드'] == code]
                df_sub = df_sub.loc[df_sub['소분류코드'].isna()]
                self.tableWidget_5.setRowCount(len(df_sub.index.tolist()) + 5)
                for i in range(0, len(df_sub.index.tolist()), 1):
                    for j in range(1, 3, 1):
                        if str(df_sub.iat[i, j]) != 'nan':
                            item = QTableWidgetItem(str(df_sub.iat[i, j]))
                            self.tableWidget_5.setItem(i, j - 1, item)
                self.code_logging(4, code)
                self.code_name_logging(4, codename)
                status = "중분류 선택 : " + str(codename) + " 목록"
                self.statusbar.showMessage(status)
            else:
                self.cleaner_combobox_tableWidget(4)

    def subcategory_tablewidget_changed2(self):
        if self.pushButton_3.isChecked():
            print("수정 중이라 다음 테이블에 띄우지 않음.")
        else:
            self.cleaner_combobox_tableWidget(5)
            row = self.tableWidget_5.currentIndex().row()
            if self.tableWidget_5.item(row, 1) != self.tableWidget99.item(1, 1):
                code = self.tableWidget_5.item(row, 0).text()
                codename = self.tableWidget_5.item(row, 1).text()
                df_opt1 = total.loc[total['회사'] == code_log[0]]
                df_opt1 = df_opt1.loc[df_opt1['품목군코드'] == code_log[1]]
                df_opt1 = df_opt1.loc[df_opt1['대분류코드'] == code_log[2]]
                df_opt1 = df_opt1.loc[df_opt1['중분류코드'] == code_log[3]]
                df_opt1 = df_opt1.loc[df_opt1['소분류코드'] == code]
                df_opt1 = df_opt1.loc[df_opt1['옵션1'].isna()]
                self.tableWidget_6.setRowCount(len(df_opt1.index.tolist())+5)
                for i in range(0, len(df_opt1.index.tolist()), 1):
                    for j in range(1, 3, 1):
                        if str(df_opt1.iat[i, j]) != 'nan':
                            item = QTableWidgetItem(str(df_opt1.iat[i, j]))
                            self.tableWidget_6.setItem(i, j - 1, item)
                self.code_logging(5, code)
                self.code_name_logging(5, codename)
                status = "소분류 선택 : " + str(codename) + " 목록"
                self.statusbar.showMessage(status)
            else:
                self.cleaner_combobox_tableWidget(5)

    def option1_tablewidget_changed2(self):
        if self.pushButton_3.isChecked():
            print("수정 중이라 다음 테이블에 띄우지 않음.")
        else:
            self.cleaner_combobox_tableWidget(6)
            row = self.tableWidget_6.currentIndex().row()
            if self.tableWidget_6.item(row, 1) != self.tableWidget99.item(1, 1):
                code = self.tableWidget_6.item(row, 0).text()
                codename = self.tableWidget_6.item(row, 1).text()
                df_opt2 = total.loc[total['회사'] == code_log[0]]
                df_opt2 = df_opt2.loc[df_opt2['품목군코드'] == code_log[1]]
                df_opt2 = df_opt2.loc[df_opt2['대분류코드'] == code_log[2]]
                df_opt2 = df_opt2.loc[df_opt2['중분류코드'] == code_log[3]]
                df_opt2 = df_opt2.loc[df_opt2['소분류코드'] == code_log[4]]
                df_opt2 = df_opt2.loc[df_opt2['옵션1'] == code]
                self.tableWidget_7.setRowCount(len(df_opt2.index.tolist()) + 5)
                for i in range(0, len(df_opt2.index.tolist()), 1):
                    for j in range(1, 3, 1):
                        if str(df_opt2.iat[i, j]) != 'nan':
                            item = QTableWidgetItem(str(df_opt2.iat[i, j]))
                            self.tableWidget_7.setItem(i, j - 1, item)
                self.code_logging(6, code)
                self.code_name_logging(6, codename)
                status = "옵션1 선택 : " + str(codename) + " 목록"
                self.statusbar.showMessage(status)
            else:
                self.cleaner_combobox_tableWidget(6)

    def option2_tablewidget_changed2(self):
        if self.pushButton_3.isChecked():
            print("수정 중이라 다음 테이블에 띄우지 않음.")
        else:
            row = self.tableWidget_7.currentIndex().row()
            if self.tableWidget_7.item(row, 1) != self.tableWidget99.item(1, 1):
                codename = self.tableWidget_7.item(row, 1).text()
                code = self.tableWidget_7.item(row, 0).text()
                self.code_logging(7, code)
                self.code_name_logging(7, codename)
                status = "옵션2 선택 : " + str(codename)
                self.statusbar.showMessage(status)


    def modify_mode_company(self):
        global total
        total.dropna(subset = ['회사'])
        new_df = pd.read_csv("case.csv", encoding='utf-8')
        i = 0
        while self.tableWidget.item(i, 1) != self.tableWidget99.item(0, 0):
            print(self.tableWidget.item(i, 0).text())
            print(self.tableWidget.item(i, 1).text())
            new_df.at[i, 'index'] = i
            new_df.at[i, '코드'] = self.tableWidget.item(i, 0).text()
            new_df.at[i, '코드명'] = self.tableWidget.item(i, 1).text()
            i = i + 1

        print("저장될 테이블")
        new_df
        total = pd.concat([new_df,total])
        total = total.drop_duplicates(keep='first')
        print("저장된 데이터프레임")
        total




    def modify_mode_product(self):
        global total
        df_product = total.loc[total['회사'] == code_log[0]]
        df_product = df_product.loc[df_product['품목군코드'].isna()]
        total = pd.concat([total, df_product])
        total = total.drop_duplicates(keep=False)
        new_df = pd.read_csv("case.csv", encoding='utf-8')
        i = 0
        while self.tableWidget_2.item(i, 1) != self.tableWidget99.item(0, 0):
            print(self.tableWidget_2.item(i, 0).text())
            print(self.tableWidget_2.item(i, 1).text())
            new_df.at[i, 'index'] = i
            new_df.at[i, '코드'] = self.tableWidget_2.item(i, 0).text()
            new_df.at[i, '코드명'] = self.tableWidget_2.item(i, 1).text()
            new_df.at[i, '회사'] = code_log[0]
            i = i + 1
        print("저장될 테이블")
        new_df
        total = pd.concat([new_df, total])
        total = total.drop_duplicates(keep='first')
        print("저장된 데이터프레임")
        total


    def modify_mode_maincategory(self):
        global total
        df_maincategory = total.loc[total['회사'] == code_log[0]]
        df_maincategory = df_maincategory.loc[df_maincategory['품목군코드'] == code_log[1]]
        df_maincategory = df_maincategory.loc[df_maincategory['대분류코드'].isna()]
        total = pd.concat([total, df_maincategory])
        total = total.drop_duplicates(keep=False)
        new_df = pd.read_csv("case.csv", encoding='utf-8')
        i = 0
        while self.tableWidget_3.item(i, 1) != self.tableWidget99.item(0, 0):
            print(self.tableWidget_3.item(i, 0).text())
            print(self.tableWidget_3.item(i, 1).text())
            new_df.at[i, 'index'] = i
            new_df.at[i, '코드'] = self.tableWidget_3.item(i, 0).text()
            new_df.at[i, '코드명'] = self.tableWidget_3.item(i, 1).text()
            new_df.at[i, '회사'] = code_log[0]
            new_df.at[i, '품목군코드'] = code_log[1]
            i = i + 1
        print("저장될 테이블")
        new_df
        total = pd.concat([new_df, total])
        total = total.drop_duplicates(keep='first')
        print("저장된 데이터프레임")
        total


    def modify_mode_middlecategory(self):
        global total
        df_middlecategory = total.loc[total['회사'] == code_log[0]]
        df_middlecategory = df_middlecategory.loc[df_middlecategory['품목군코드'] == code_log[1]]
        df_middlecategory = df_middlecategory.loc[df_middlecategory['대분류코드'] == code_log[2]]
        df_middlecategory = df_middlecategory.loc[df_middlecategory['중분류코드'].isna()]
        total = pd.concat([total, df_middlecategory])
        total = total.drop_duplicates(keep=False)
        new_df = pd.read_csv("case.csv", encoding='utf-8')
        i = 0
        while self.tableWidget_4.item(i, 1) != self.tableWidget99.item(0, 0):
            print(self.tableWidget_4.item(i, 0).text())
            print(self.tableWidget_4.item(i, 1).text())
            new_df.at[i, 'index'] = i
            new_df.at[i, '코드'] = self.tableWidget_4.item(i, 0).text()
            new_df.at[i, '코드명'] = self.tableWidget_4.item(i, 1).text()
            new_df.at[i, '회사'] = code_log[0]
            new_df.at[i, '품목군코드'] = code_log[1]
            new_df.at[i, '대분류코드'] = code_log[2]
            i = i + 1
        print("저장될 테이블")
        new_df
        total = pd.concat([new_df, total])
        total = total.drop_duplicates(keep='first')
        print("저장된 데이터프레임")
        total


    def modify_mode_subcategory(self):
        global total
        df_subcategory = total.loc[total['회사'] == code_log[0]]
        df_subcategory = df_subcategory.loc[df_subcategory['품목군코드'] == code_log[1]]
        df_subcategory = df_subcategory.loc[df_subcategory['대분류코드'] == code_log[2]]
        df_subcategory = df_subcategory.loc[df_subcategory['중분류코드'] == code_log[3]]
        df_subcategory = df_subcategory.loc[df_subcategory['소분류코드'].isna()]
        total = pd.concat([total, df_subcategory])
        total = total.drop_duplicates(keep=False)
        new_df = pd.read_csv("case.csv", encoding='utf-8')
        i = 0
        while self.tableWidget_5.item(i, 1) != self.tableWidget99.item(0, 0):
            print(self.tableWidget_5.item(i, 0).text())
            print(self.tableWidget_5.item(i, 1).text())
            new_df.at[i, 'index'] = i
            new_df.at[i, '코드'] = self.tableWidget_5.item(i, 0).text()
            new_df.at[i, '코드명'] = self.tableWidget_5.item(i, 1).text()
            new_df.at[i, '회사'] = code_log[0]
            new_df.at[i, '품목군코드'] = code_log[1]
            new_df.at[i, '대분류코드'] = code_log[2]
            new_df.at[i, '중분류코드'] = code_log[3]
            i = i + 1
        print("저장될 테이블")
        new_df
        total = pd.concat([new_df, total])
        total = total.drop_duplicates(keep='first')
        print("저장된 데이터프레임")
        total

    def modify_mode_options1(self):
        global total
        df_options1 = total.loc[total['회사'] == code_log[0]]
        df_options1 = df_options1.loc[df_options1['품목군코드'] == code_log[1]]
        df_options1 = df_options1.loc[df_options1['대분류코드'] == code_log[2]]
        df_options1 = df_options1.loc[df_options1['중분류코드'] == code_log[3]]
        df_options1 = df_options1.loc[df_options1['소분류코드'] == code_log[4]]
        df_options1 = df_options1.loc[df_options1['옵션1'].isna()]
        total = pd.concat([total, df_options1])
        total = total.drop_duplicates(keep=False)
        new_df = pd.read_csv("case.csv", encoding='utf-8')
        i = 0
        while self.tableWidget_6.item(i, 1) != self.tableWidget99.item(0, 0):
            print(self.tableWidget_6.item(i, 0).text())
            print(self.tableWidget_6.item(i, 1).text())
            new_df.at[i, 'index'] = i
            new_df.at[i, '코드'] = self.tableWidget_6.item(i, 0).text()
            new_df.at[i, '코드명'] = self.tableWidget_6.item(i, 1).text()
            new_df.at[i, '회사'] = code_log[0]
            new_df.at[i, '품목군코드'] = code_log[1]
            new_df.at[i, '대분류코드'] = code_log[2]
            new_df.at[i, '중분류코드'] = code_log[3]
            new_df.at[i, '소분류코드'] = code_log[4]
            i = i + 1
        print("저장될 테이블")
        new_df
        total = pd.concat([new_df, total])
        total = total.drop_duplicates(keep='first')
        print("저장된 데이터프레임")
        total

    def modify_mode_options2(self):
        global total
        df_options2 = total.loc[total['회사'] == code_log[0]]
        df_options2 = df_options2.loc[df_options2['품목군코드'] == code_log[1]]
        df_options2 = df_options2.loc[df_options2['대분류코드'] == code_log[2]]
        df_options2 = df_options2.loc[df_options2['중분류코드'] == code_log[3]]
        df_options2 = df_options2.loc[df_options2['소분류코드'] == code_log[4]]
        df_options2 = df_options2.loc[df_options2['옵션1'] == code_log[5]]
        total = pd.concat([total, df_options2])
        total = total.drop_duplicates(keep=False)
        new_df = pd.read_csv("case.csv", encoding='utf-8')
        i = 0
        while self.tableWidget_7.item(i, 1) != self.tableWidget99.item(0, 0):
            print(self.tableWidget_7.item(i, 0).text())
            print(self.tableWidget_7.item(i, 1).text())
            new_df.at[i, 'index'] = i
            new_df.at[i, '코드'] = self.tableWidget_7.item(i, 0).text()
            new_df.at[i, '코드명'] = self.tableWidget_7.item(i, 1).text()
            new_df.at[i, '회사'] = code_log[0]
            new_df.at[i, '품목군코드'] = code_log[1]
            new_df.at[i, '대분류코드'] = code_log[2]
            new_df.at[i, '중분류코드'] = code_log[3]
            new_df.at[i, '소분류코드'] = code_log[4]
            new_df.at[i, '옵션1'] = code_log[5]

            i = i + 1
        print("저장될 테이블")
        new_df
        total = pd.concat([new_df, total])
        total = total.drop_duplicates(keep='first')
        print("저장된 데이터프레임")
        total



    def csv_list(self, MainWindow):

        self.comboBox.clear()
        for i in range(8):
            self.comboBox.insertItem(i, list_option[i])

        self.pushButton.clicked.connect(lambda: self.open_button_event(True))

    def code_logging(self, where, code):
        if where == 0:
            self.textEdit.clear()
            code_log[0] = code_log_reset[0]
            code_log[1] = code_log_reset[1]
            code_log[2] = code_log_reset[2]
            code_log[3] = code_log_reset[3]
            code_log[4] = code_log_reset[4]
            code_log[5] = code_log_reset[5]
            code_log[6] = code_log_reset[6]
            result = ""
            self.textEdit.setText(result)
        elif where == 1:
            self.textEdit.clear()
            code_log[0] = code
            code_log[1] = code_log_reset[1]
            code_log[2] = code_log_reset[2]
            code_log[3] = code_log_reset[3]
            code_log[4] = code_log_reset[4]
            code_log[5] = code_log_reset[5]
            code_log[6] = code_log_reset[6]
            result = code_log[0]
            self.textEdit.setText(result)
        elif where == 2:
            self.textEdit.clear()
            code_log[1] = code
            code_log[2] = code_log_reset[2]
            code_log[3] = code_log_reset[3]
            code_log[4] = code_log_reset[4]
            code_log[5] = code_log_reset[5]
            code_log[6] = code_log_reset[6]
            result = code_log[0] + code_log[1]
            self.textEdit.setText(result)
        elif where == 3:
            self.textEdit.clear()
            code_log[2] = code
            code_log[3] = code_log_reset[3]
            code_log[4] = code_log_reset[4]
            code_log[5] = code_log_reset[5]
            code_log[6] = code_log_reset[6]
            result = code_log[0] + code_log[1] + "-" + code_log[2]
            self.textEdit.setText(result)
        elif where == 4:
            self.textEdit.clear()
            code_log[3] = code
            code_log[4] = code_log_reset[4]
            code_log[5] = code_log_reset[5]
            code_log[6] = code_log_reset[6]
            result = code_log[0] + code_log[1] + "-" + code_log[2] + code_log[3]
            self.textEdit.setText(result)
        elif where == 5:
            self.textEdit.clear()
            code_log[4] = code
            code_log[5] = code_log_reset[5]
            code_log[6] = code_log_reset[6]
            result = code_log[0] + code_log[1] + "-" + code_log[2] + code_log[3] + code_log[4]
            self.textEdit.setText(result)
        elif where == 6:
            self.textEdit.clear()
            code_log[5] = code
            code_log[6] = code_log_reset[6]
            result = code_log[0] + code_log[1] + "-" + code_log[2] + code_log[3] + code_log[4] + code_log[5]
            self.textEdit.setText(result)
        elif where == 7:
            self.textEdit.clear()
            code_log[6] = code
            result = code_log[0] + code_log[1] + "-" + code_log[2] + code_log[3] + code_log[4] + code_log[5] + code_log[6]
            self.textEdit.setText(result)

    def code_name_logging(self, where, codename):
        if where == 0:
            self.textEdit_2.clear()
            code_name_log[0] = code_log_reset[0]
            code_name_log[1] = code_log_reset[1]
            code_name_log[2] = code_log_reset[2]
            code_name_log[3] = code_log_reset[3]
            code_name_log[4] = code_log_reset[4]
            code_name_log[5] = code_log_reset[5]
            code_name_log[6] = code_log_reset[6]
            result = ' '.join(s for s in code_name_log)
            self.textEdit_2.setText(result)

        elif where == 1:
            self.textEdit_2.clear()
            if self.checkBox.isChecked() == False:
                codename = ""
            code_name_log[0] = codename
            code_name_log[1] = code_log_reset[1]
            code_name_log[2] = code_log_reset[2]
            code_name_log[3] = code_log_reset[3]
            code_name_log[4] = code_log_reset[4]
            code_name_log[5] = code_log_reset[5]
            code_name_log[6] = code_log_reset[6]
            result = ' '.join(s for s in code_name_log)
            self.textEdit_2.setText(result)
        elif where == 2:
            self.textEdit_2.clear()
            if self.checkBox_2.isChecked() == False:
                codename = ""
            code_name_log[1] = codename
            code_name_log[2] = code_log_reset[2]
            code_name_log[3] = code_log_reset[3]
            code_name_log[4] = code_log_reset[4]
            code_name_log[5] = code_log_reset[5]
            code_name_log[6] = code_log_reset[6]
            result = ' '.join(s for s in code_name_log)
            self.textEdit_2.setText(result)
        elif where == 3:
            self.textEdit_2.clear()
            if self.checkBox_3.isChecked() == False:
                codename = ""
            code_name_log[2] = codename
            code_name_log[3] = code_log_reset[3]
            code_name_log[4] = code_log_reset[4]
            code_name_log[5] = code_log_reset[5]
            code_name_log[6] = code_log_reset[6]
            result = ' '.join(s for s in code_name_log)
            self.textEdit_2.setText(result)
        elif where == 4:
            self.textEdit_2.clear()
            if self.checkBox_4.isChecked() == False:
                codename = ""
            code_name_log[3] = codename
            code_name_log[4] = code_log_reset[4]
            code_name_log[5] = code_log_reset[5]
            code_name_log[6] = code_log_reset[6]
            result = ' '.join(s for s in code_name_log)
            self.textEdit_2.setText(result)
        elif where == 5:
            self.textEdit_2.clear()
            if self.checkBox_5.isChecked() == False:
                codename = ""
            code_name_log[4] = codename
            code_name_log[5] = code_log_reset[5]
            code_name_log[6] = code_log_reset[6]
            result = ' '.join(s for s in code_name_log)
            self.textEdit_2.setText(result)
        elif where == 6:
            self.textEdit_2.clear()
            if self.checkBox_6.isChecked() == False:
                codename = ""
            code_name_log[5] = codename
            code_name_log[6] = code_log_reset[6]
            result = ' '.join(s for s in code_name_log)
            self.textEdit_2.setText(result)
        elif where == 7:
            self.textEdit_2.clear()
            if self.checkBox_7.isChecked() == False:
                codename = ""
            code_name_log[6] = codename
            result = ' '.join(s for s in code_name_log)
            self.textEdit_2.setText(result)


    def open_button_event(self, bool):
        if bool:
            csvindex = self.comboBox.currentIndex() - 1
            if csvindex == -1:
                csvindex = 7
            df = pd.read_csv('total.csv')
            df_company = df.loc[df['회사'].isna()]
            df = pd.concat([df, df_company])
            df = df.drop_duplicates(['코드', '코드명', '회사', '품목군코드', '대분류코드', '중분류코드', '소분류코드', '옵션1'], keep=False)
            df_company.to_csv("Companies.csv", index=False, encoding="utf-8-sig")
            df_product = df.loc[df['품목군코드'].isna()]
            df = pd.concat([df, df_product])
            df = df.drop_duplicates(['코드', '코드명', '회사', '품목군코드', '대분류코드', '중분류코드', '소분류코드', '옵션1'], keep=False)
            df_product.to_csv("Products.csv", index=False, encoding="utf-8-sig")
            df_main = df.loc[df['대분류코드'].isna()]
            df = pd.concat([df, df_main])
            df = df.drop_duplicates(['코드', '코드명', '회사', '품목군코드', '대분류코드', '중분류코드', '소분류코드', '옵션1'], keep=False)
            df_main.to_csv("MainCategory.csv", index=False, encoding="utf-8-sig")
            df_mid = df.loc[df['중분류코드'].isna()]
            df = pd.concat([df, df_mid])
            df = df.drop_duplicates(['코드', '코드명', '회사', '품목군코드', '대분류코드', '중분류코드', '소분류코드', '옵션1'], keep=False)
            df_mid.to_csv("MiddleCategory.csv", index=False, encoding="utf-8-sig")
            df_sub = df.loc[df['소분류코드'].isna()]
            df = pd.concat([df, df_sub])
            df = df.drop_duplicates(['코드', '코드명', '회사', '품목군코드', '대분류코드', '중분류코드', '소분류코드', '옵션1'], keep=False)
            df_sub.to_csv("SubCategory.csv", index=False, encoding="utf-8-sig")
            df_opt1 = df.loc[df['옵션1'].isna()]
            df = pd.concat([df, df_opt1])
            df = df.drop_duplicates(['코드', '코드명', '회사', '품목군코드', '대분류코드', '중분류코드', '소분류코드', '옵션1'], keep=False)
            df_opt1.to_csv("Options1.csv", index=False, encoding="utf-8-sig")
            df_opt2 = df.loc[df['옵션1'].notna()]
            df_opt2.to_csv("Options2.csv", index=False, encoding="utf-8-sig")


            dfchange = pd.read_csv(list_csv_name[csvindex], encoding = 'utf-8')
            dfchange.to_csv(list_csv_name[csvindex],index=False, encoding='utf-8-sig')
            #os.startfile(list_csv_name[csvindex])
            status = str(list_csv_name[csvindex]) + " 여는 중."
            self.statusbar.showMessage(status)





if __name__ == "__main__":
    import sys

    global list_csv
    global list_csv_name
    global list_option
    global selected_csv_number
    global code_log
    global code_log_reset
    global code_name_log
    global total

    app = QtWidgets.QApplication(sys.argv)
    app.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling)
    stylesheet = qtvsc.load_stylesheet(qtvsc.Theme.DARK_VS)
    app.setStyleSheet(stylesheet)
    mainWindow = QtWidgets.QMainWindow()


    list_option = ['전체', '회사', '품목군', '대분류', '중분류', '소분류', '옵션1', '옵션2']
    list_csv_name = ['Companies.csv', 'Products.csv', 'MainCategory.csv', 'MiddleCategory.csv', 'SubCategory.csv',
                     'Options1.csv', 'Options2.csv','total']
    list_csv = ['companies', 'products', 'maincategory', 'middlecategory', 'subcategory',
                'options1', 'options2']
    code_log = [' ', ' ', ' ', ' ', ' ', ' ', ' ']
    code_log_reset = [' ', ' ', ' ', ' ', ' ', ' ', ' ']
    code_name_log = [' ', ' ', ' ', ' ', ' ', ' ', ' ']
    total = pd.read_csv("total.csv")
    total = total.drop_duplicates(keep='first')
    qtvsc.list_color_id()
    ui = Ui_mainWindow()

    ui.setupUi(mainWindow)
    ui.csv_list(mainWindow)

    mainWindow.show()
    sys.exit(app.exec_())
