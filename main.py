# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '흐어어.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import qtmodern.styles
import qtmodern.windows

from PyQt5 import QtCore, QtGui, QtWidgets

import pandas as pd
import os
from PyQt5.QtWidgets import QTableWidgetItem, QAbstractItemView


class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1650, 720)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

    def setupUi_Companies(self, MainWindow, *item):

        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(20, 30, 211, 26))
        self.comboBox.setObjectName("comboBox")

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(90, 10, 60, 20))
        self.label.setObjectName("label")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setFont(font)
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(20, 60, 211, 341))
        self.tableWidget.setObjectName("tableWidget")

        self.tableWidget.setAlternatingRowColors(True)
        self.tableWidget.setStyleSheet("color: white;"
                                       "gridline-color: rgb(255, 255, 255);")
        df = pd.read_csv(list_csv_name[0])
        self.tableWidget.setColumnCount(2)
        self.tableWidget.setRowCount(50)
        for i in range(0, len(df.index.tolist()), 1):
            self.comboBox.insertItem(i, str(df.iat[i, 2]))
        for i in range(0, len(df.index.tolist()), 1):
            for j in range(1, 3, 1):
                item = QTableWidgetItem(df.iat[i, j])
                self.tableWidget.setItem(i, j - 1, item)
        self.comboBox.textActivated.connect(print)
        self.comboBox.textActivated.connect(self.company_combobox_changed2)

    def setupUi_Products(self, MainWindow, *item):
        self.comboBox_2 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_2.setGeometry(QtCore.QRect(250, 30, 211, 26))
        self.comboBox_2.setObjectName("comboBox_2")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(320, 10, 60, 20))
        self.label_2.setObjectName("label_2")
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.tableWidget_2 = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget_2.setGeometry(QtCore.QRect(250, 60, 211, 341))
        self.tableWidget_2.setObjectName("tableWidget_2")
        self.tableWidget_2.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.tableWidget_2.setAlternatingRowColors(True)
        self.tableWidget_2.setStyleSheet("color: white;"
                                         "gridline-color: rgb(255, 255, 255);")

        self.tableWidget_2.setColumnCount(2)
        self.tableWidget_2.setRowCount(50)

        self.comboBox_2.textActivated.connect(self.products_combobox_changed2)

    def setupUi_MainCategory(self, MainWindow, *item):
        self.comboBox_3 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_3.setGeometry(QtCore.QRect(480, 30, 211, 26))
        self.comboBox_3.setObjectName("comboBox_2")

        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(550, 10, 60, 20))
        self.label_3.setObjectName("label_2")
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.tableWidget_3 = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget_3.setGeometry(QtCore.QRect(480, 60, 211, 341))
        self.tableWidget_3.setObjectName("tableWidget_2")
        self.tableWidget_3.setColumnCount(0)
        self.tableWidget_3.setRowCount(0)
        self.tableWidget_3.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.tableWidget_3.setAlternatingRowColors(True)
        self.tableWidget_3.setStyleSheet("color: white;"
                                         "gridline-color: rgb(255, 255, 255);")

        self.tableWidget_3.setColumnCount(2)
        self.tableWidget_3.setRowCount(50)

        self.comboBox_3.textActivated.connect(self.maincategory_combobox_changed2)

    def setupUi_MiddleCategory(self, MainWindow, *item):
        self.comboBox_4 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_4.setGeometry(QtCore.QRect(710, 30, 211, 26))
        self.comboBox_4.setObjectName("comboBox_2")

        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(780, 10, 60, 20))
        self.label_4.setObjectName("label_2")
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.tableWidget_4 = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget_4.setGeometry(QtCore.QRect(710, 60, 211, 341))
        self.tableWidget_4.setObjectName("tableWidget_2")
        self.tableWidget_4.setColumnCount(0)
        self.tableWidget_4.setRowCount(0)
        self.tableWidget_4.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.tableWidget_4.setAlternatingRowColors(True)
        self.tableWidget_4.setStyleSheet("color: white;"
                                         "gridline-color: rgb(255, 255, 255);")

        self.tableWidget_4.setColumnCount(2)
        self.tableWidget_4.setRowCount(50)

        self.comboBox_4.textActivated.connect(self.middlecategory_combobox_changed2)

    def setupUi_SubCategory(self, MainWindow, *item):
        self.comboBox_5 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_5.setGeometry(QtCore.QRect(940, 30, 211, 26))
        self.comboBox_5.setObjectName("comboBox_2")

        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(1010, 10, 60, 20))
        self.label_5.setObjectName("label_2")
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)

        self.tableWidget_5 = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget_5.setGeometry(QtCore.QRect(940, 60, 211, 341))
        self.tableWidget_5.setObjectName("tableWidget_2")
        self.tableWidget_5.setColumnCount(0)
        self.tableWidget_5.setRowCount(0)
        self.tableWidget_5.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.tableWidget_5.setAlternatingRowColors(True)
        self.tableWidget_5.setStyleSheet("color: white;"
                                         "gridline-color: rgb(255, 255, 255);")
        self.tableWidget_5.setColumnCount(2)
        self.tableWidget_5.setRowCount(50)
        self.comboBox_5.textActivated.connect(self.subcategory_combobox_changed2)

    def setupUi_Options1(self, MainWindow, *item):
        self.comboBox_6 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_6.setGeometry(QtCore.QRect(1170, 30, 211, 26))
        self.comboBox_6.setObjectName("comboBox_2")

        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(1240, 10, 60, 20))
        self.label_6.setObjectName("label_2")
        self.label_6.setAlignment(QtCore.Qt.AlignCenter)

        self.tableWidget_6 = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget_6.setGeometry(QtCore.QRect(1170, 60, 211, 341))
        self.tableWidget_6.setObjectName("tableWidget_2")
        self.tableWidget_6.setColumnCount(0)
        self.tableWidget_6.setRowCount(0)
        self.tableWidget_6.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.tableWidget_6.setAlternatingRowColors(True)
        self.tableWidget_6.setStyleSheet("color: white;"
                                         "gridline-color: rgb(255, 255, 255);")
        self.tableWidget_6.setColumnCount(2)
        self.tableWidget_6.setRowCount(50)
        self.comboBox_6.textActivated.connect(self.option1_combobox_changed2)

    def setupUi_Options2(self, MainWindow, *item):
        self.comboBox_7 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_7.setGeometry(QtCore.QRect(1400, 30, 211, 26))
        self.comboBox_7.setObjectName("comboBox_2")

        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(1470, 10, 60, 20))
        self.label_7.setObjectName("label_2")
        self.label_7.setAlignment(QtCore.Qt.AlignCenter)
        self.tableWidget_7 = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget_7.setGeometry(QtCore.QRect(1400, 60, 211, 341))
        self.tableWidget_7.setObjectName("tableWidget_2")
        self.tableWidget_7.setColumnCount(2)
        self.tableWidget_7.setRowCount(50)
        self.tableWidget_7.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.tableWidget_7.setAlternatingRowColors(True)
        self.tableWidget_7.setStyleSheet("color: white;"
                                         "gridline-color: rgb(255, 255, 255);")
        self.comboBox_7.textActivated.connect(self.option2_combobox_changed2)

    def text_log_and_csv_open(self, MainWindow):
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(20, 460, 551, 35))
        self.textEdit.setTextInteractionFlags(QtCore.Qt.TextSelectableByKeyboard | QtCore.Qt.TextSelectableByMouse)
        self.textEdit.setObjectName("textEdit")

        self.label8 = QtWidgets.QLabel(self.centralwidget)
        self.label8.setGeometry(QtCore.QRect(40, 430, 80, 20))
        self.label8.setObjectName("label")

        self.label9 = QtWidgets.QLabel(self.centralwidget)
        self.label9.setGeometry(QtCore.QRect(1363, 430, 150, 20))
        self.label9.setObjectName("label")

        MainWindow.setCentralWidget(self.centralwidget)

    def csv_list(self, MainWindow):
        self.comboBox_8 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_8.setGeometry(QtCore.QRect(1363, 470, 131, 31))
        self.comboBox_8.setObjectName("comboBox_8")
        for i in range(7):
            self.comboBox_8.addItem('')

        self.comboBox_8.currentIndexChanged.connect(self.open_csv_file)

    def csv_list2(self, MainWindow):
        self.comboBox_9 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_9.setGeometry(QtCore.QRect(1063, 470, 131, 31))
        self.comboBox_9.setObjectName("comboBox_9")
        for i in range(7):
            self.comboBox_9.addItem('')
        self.comboBox_9.activated.connect(self.selectedcsvnumber)
        self.button1 = QtWidgets.QPushButton(self.centralwidget)
        self.button1.setObjectName("button1")
        self.button1.setGeometry(QtCore.QRect(1210, 470, 50, 31))
        self.button1.setText("저장")
        self.button1.clicked.connect(lambda:self.button_event(True))

    def selectedcsvnumber(self, index):
        selected_csv_number = index
        print(selected_csv_number)
        return selected_csv_number
# 이부분 열기 버튼에도 적용해보자
    def save_button_event(self, bool):
        if bool:
            one_text = self.comboBox_9.currentIndex()
            print(one_text)





    def open_csv_file(self, csvindex):
        os.startfile(list_csv_name[csvindex-1])

    def setupUi_final(self, MainWindow, *item):
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "품목관리"))
        self.label.setText(_translate("MainWindow", "회사"))
        self.label_2.setText(_translate("MainWindow", "품목군"))
        self.label_3.setText(_translate("MainWindow", "대분류"))
        self.label_4.setText(_translate("MainWindow", "중분류"))
        self.label_5.setText(_translate("MainWindow", "소분류"))
        self.label_6.setText(_translate("MainWindow", "옵션1"))
        self.label_7.setText(_translate("MainWindow", "옵션2"))
        self.tableWidget.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeToContents)
        self.tableWidget_2.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeToContents)
        self.tableWidget_3.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeToContents)
        self.tableWidget_4.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeToContents)
        self.tableWidget_5.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeToContents)
        self.tableWidget_6.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeToContents)
        self.tableWidget_7.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeToContents)
        self.label8.setText(_translate("MainWindow", "코드 로그"))
        self.label9.setText(_translate("MainWindow", "CSV 파일 선택"))
        self.comboBox_8.setItemText(0, _translate("MainWindow", "선택"))
        self.comboBox_8.setItemText(1, _translate("MainWindow", "회사"))
        self.comboBox_8.setItemText(2, _translate("MainWindow", "품목군"))
        self.comboBox_8.setItemText(3, _translate("MainWindow", "대분류"))
        self.comboBox_8.setItemText(4, _translate("MainWindow", "중분류"))
        self.comboBox_8.setItemText(5, _translate("MainWindow", "소분류"))
        self.comboBox_8.setItemText(6, _translate("MainWindow", "옵션1"))
        self.comboBox_8.setItemText(7, _translate("MainWindow", "옵션2"))
        self.comboBox_9.setItemText(0, _translate("MainWindow", "선택"))
        self.comboBox_9.setItemText(1, _translate("MainWindow", "회사"))
        self.comboBox_9.setItemText(2, _translate("MainWindow", "품목군"))
        self.comboBox_9.setItemText(3, _translate("MainWindow", "대분류"))
        self.comboBox_9.setItemText(4, _translate("MainWindow", "중분류"))
        self.comboBox_9.setItemText(5, _translate("MainWindow", "소분류"))
        self.comboBox_9.setItemText(6, _translate("MainWindow", "옵션1"))
        self.comboBox_9.setItemText(7, _translate("MainWindow", "옵션2"))

    def cleaner_combobox_tableWidget(self, where):
        if where < 7:
            self.tableWidget_7.clear()
            self.comboBox_7.clear()
            if where < 6:
                self.tableWidget_6.clear()
                self.comboBox_6.clear()
                if where < 5:
                    self.tableWidget_5.clear()
                    self.comboBox_5.clear()
                    if where < 4:
                        self.tableWidget_4.clear()
                        self.comboBox_4.clear()
                        if where < 3:
                            self.tableWidget_3.clear()
                            self.comboBox_3.clear()
                            if where < 2:
                                self.tableWidget_2.clear()
                                self.comboBox_2.clear()




    def company_combobox_changed2(self, codename):

        current_select2 = codename
        df_before = pd.read_csv(list_csv_name[0])
        df_before = df_before.applymap(str)
        df_before = df_before[df_before['코드명'] == current_select2]
        code = df_before.iat[0, 1]
        df = pd.read_csv(list_csv_name[1])
        df = df.applymap(str)
        df1 = df[df['회사'] == code]
        #디버깅용
        print(current_select2)
        print(df_before)
        print(code)
        print(df1)
        self.cleaner_combobox_tableWidget(1)
        for i in range(0, len(df1.index.tolist()), 1):
            self.comboBox_2.insertItem(i, str(df1.iat[i, 2]))
        for i in range(0, len(df1.index.tolist()), 1):
            for j in range(1, 3, 1):
                item = QTableWidgetItem(df1.iat[i, j])
                self.tableWidget_2.setItem(i, j - 1, item)
        self.code_logging(1, code)

        #기능 구현 - 테이블을 수정했다면 그 수정한 값을 엑셀에 추가.





    def products_combobox_changed2(self, codename):
        current_select2 = codename
        df_before = pd.read_csv(list_csv_name[1])
        df_before = df_before.applymap(str)
        df_before = df_before[df_before['코드명'] == current_select2]
        code = df_before.iat[0, 1]
        df = pd.read_csv(list_csv_name[2])
        df = df.applymap(str)
        df1 = df[df['품목군코드'] == code]
        # 디버깅용
        print(current_select2)
        print(df_before)
        print(code)
        print(df1)
        self.cleaner_combobox_tableWidget(2)
        for i in range(0, len(df1.index.tolist()), 1):
            self.comboBox_3.insertItem(i, str(df1.iat[i, 2]))
        for i in range(0, len(df1.index.tolist()), 1):
            for j in range(1, 3, 1):
                item = QTableWidgetItem(df1.iat[i, j])
                self.tableWidget_3.setItem(i, j - 1, item)
        self.code_logging(2, code)

    def maincategory_combobox_changed2(self, codename):
        current_select2 = codename
        df_before = pd.read_csv(list_csv_name[2])
        df_before = df_before.applymap(str)
        df_before = df_before[df_before['코드명'] == current_select2]
        code = df_before.iat[0, 1]
        df = pd.read_csv(list_csv_name[3])
        df = df.applymap(str)
        df1 = df[df['대분류코드'] == code]
        # 디버깅용
        print(current_select2)
        print(df_before)
        print(code)
        print(df1)
        self.cleaner_combobox_tableWidget(3)
        for i in range(0, len(df1.index.tolist()), 1):
            self.comboBox_4.insertItem(i, str(df1.iat[i, 2]))
        for i in range(0, len(df1.index.tolist()), 1):
            for j in range(1, 3, 1):
                item = QTableWidgetItem(df1.iat[i, j])
                self.tableWidget_4.setItem(i, j - 1, item)
        self.code_logging(3, code)

    def middlecategory_combobox_changed2(self, codename):
        current_select2 = codename
        df_before = pd.read_csv(list_csv_name[3])
        df_before = df_before.applymap(str)
        df_before = df_before[df_before['코드명'] == current_select2]
        code = df_before.iat[0, 1]
        df = pd.read_csv(list_csv_name[4])
        df = df.applymap(str)
        df1 = df[df['중분류코드'] == code]
        # 디버깅용
        print(current_select2)
        print(df_before)
        print(code)
        print(df1)
        self.cleaner_combobox_tableWidget(4)
        for i in range(0, len(df1.index.tolist()), 1):
            self.comboBox_5.insertItem(i, str(df1.iat[i, 2]))
        for i in range(0, len(df1.index.tolist()), 1):
            for j in range(1, 3, 1):
                item = QTableWidgetItem(df1.iat[i, j])
                self.tableWidget_5.setItem(i, j - 1, item)
        self.code_logging(4, code)

    def subcategory_combobox_changed2(self, codename):
        current_select2 = codename
        df_before = pd.read_csv(list_csv_name[4])
        df_before = df_before.applymap(str)
        df_before = df_before[df_before['코드명'] == current_select2]
        code = df_before.iat[0, 1]
        df = pd.read_csv(list_csv_name[5])
        df = df.applymap(str)
        df1 = df[df['소분류코드'] == code]
        # 디버깅용
        print(current_select2)
        print(df_before)
        print(code)
        print(df1)
        self.cleaner_combobox_tableWidget(5)
        for i in range(0, len(df1.index.tolist()), 1):
            self.comboBox_6.insertItem(i, str(df1.iat[i, 2]))
        for i in range(0, len(df1.index.tolist()), 1):
            for j in range(1, 3, 1):
                item = QTableWidgetItem(str(df1.iat[i, j]))
                self.tableWidget_6.setItem(i, j - 1, item)
        self.code_logging(5, code)

    def option1_combobox_changed2(self, codename):
        current_select2 = codename
        df_before = pd.read_csv(list_csv_name[5])
        df_before = df_before.applymap(str)
        df_before = df_before[df_before['코드명'] == current_select2]
        code = df_before.iat[0, 1]
        df = pd.read_csv(list_csv_name[6])
        df = df.applymap(str)
        df1 = df[df['옵션1'] == code]
        # 디버깅용
        print(current_select2)
        print(df_before)
        print(code)
        print(df1)
        self.cleaner_combobox_tableWidget(6)
        for i in range(0, len(df1.index.tolist()), 1):
            self.comboBox_7.insertItem(i, str(df1.iat[i, 2]))
        for i in range(0, len(df1.index.tolist()), 1):
            for j in range(1, 3, 1):
                item = QTableWidgetItem(str(df1.iat[i, j]))
                self.tableWidget_7.setItem(i, j - 1, item)
        self.code_logging(6, code)



    def option2_combobox_changed2(self, codename):
        current_select2 = codename
        df_before = pd.read_csv(list_csv_name[5])
        df_before = df_before.applymap(str)
        df_before = df_before[df_before['코드명'] == current_select2]
        code = df_before.iat[0, 1]
        self.code_logging(7, code)

    def code_logging(self, where, code):
        if where == 1:
            self.textEdit.clear()
            code_log[0] = code
            code_log[1] = code_log_reset[1]
            code_log[2] = code_log_reset[2]
            code_log[3] = code_log_reset[3]
            code_log[4] = code_log_reset[4]
            code_log[5] = code_log_reset[5]
            code_log[6] = code_log_reset[6]
            result = ' '.join(s for s in code_log)
            self.textEdit.setText(result)
        elif where == 2:
            self.textEdit.clear()
            code_log[1] = code
            code_log[2] = code_log_reset[2]
            code_log[3] = code_log_reset[3]
            code_log[4] = code_log_reset[4]
            code_log[5] = code_log_reset[5]
            code_log[6] = code_log_reset[6]
            result = ' '.join(s for s in code_log)
            self.textEdit.setText(result)
        elif where == 3:
            self.textEdit.clear()
            code_log[2] = code
            code_log[3] = code_log_reset[3]
            code_log[4] = code_log_reset[4]
            code_log[5] = code_log_reset[5]
            code_log[6] = code_log_reset[6]
            result = ' '.join(s for s in code_log)
            self.textEdit.setText(result)
        elif where == 4:
            self.textEdit.clear()
            code_log[3] = code
            code_log[4] = code_log_reset[4]
            code_log[5] = code_log_reset[5]
            code_log[6] = code_log_reset[6]
            result = ' '.join(s for s in code_log)
            self.textEdit.setText(result)
        elif where == 5:
            self.textEdit.clear()
            code_log[4] = code
            code_log[5] = code_log_reset[5]
            code_log[6] = code_log_reset[6]
            result = ' '.join(s for s in code_log)
            self.textEdit.setText(result)
        elif where == 6:
            self.textEdit.clear()
            code_log[5] = code
            code_log[6] = code_log_reset[6]
            result = ' '.join(s for s in code_log)
            self.textEdit.setText(result)
        elif where == 7:
            self.textEdit.clear()
            code_log[6] = code
            result = ' '.join(s for s in code_log)
            self.textEdit.setText(result)


if __name__ == "__main__":
    import sys

    global list_csv
    global list_csv_name
    global selected_csv_number
    list_csv_name = ['Companies.csv', 'Products.csv', 'MainCategory.csv', 'MiddleCategory.csv', 'SubCategory.csv',
                     'Options1.csv', 'Options2.csv']
    # CSV 열 정보.
    """
    ,코드,코드명,회사,품목군,대분류,중분류,소분류,옵션1,옵션2
    """

    list_csv = ['companies', 'products', 'maincategory', 'middlecategory', 'subcategory',
                'options1', 'options2']
    global code_log
    code_log = ['1', '2', '3', '4', '5', '6', '7']
    global code_log_reset
    code_log_reset = ['', '', '', '', '', '', '']

    app = QtWidgets.QApplication(sys.argv)
    font = QtGui.QFont()
    font.setFamily("IBM Plex Sans KR Light")
    app.setFont(font)

    MainWindow = QtWidgets.QMainWindow()

    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    ui.text_log_and_csv_open(MainWindow)
    ui.csv_list(MainWindow)
    ui.csv_list2(MainWindow)
    ui.setupUi_Companies(MainWindow)
    ui.setupUi_Products(MainWindow)
    ui.setupUi_MainCategory(MainWindow)
    ui.setupUi_MiddleCategory(MainWindow)
    ui.setupUi_SubCategory(MainWindow)
    ui.setupUi_Options1(MainWindow)
    ui.setupUi_Options2(MainWindow)
    ui.setupUi_final(MainWindow)

    qtmodern.styles.dark(app)
    mw = qtmodern.windows.ModernWindow(MainWindow)

    mw.show()

    sys.exit(app.exec_())
